{"id":142345,"xmlId":"com.illuminatedcloud2.intellij","name":"Illuminated Cloud 2","description":"\n        <p>\n            <b>Illuminated Cloud</b> brings the modern feature set of JetBrains' powerful IDEs to Salesforce\n            development. Illuminated Cloud not only saves you time with its <b>intelligent auto-completion</b> for all\n            Salesforce programming languages and metadata types, but it also <b>recognizes issues</b> in your code and\n            <b>offers suggestions</b> for how to correct them. With Illuminated Cloud's <b>refactoring</b> capabilities,\n            you'll be able to <b>own and evolve</b> your Salesforce code base like never before.\n        </p>\n        <p>\n            Illuminated Cloud provides full support for <b>traditional</b> and <b>Salesforce DX</b> development\n            models—against both scratch orgs and non-scratch orgs—allowing you to flow seamlessly between\n            the various\n            models in a single tool. Because Illuminated Cloud extends JetBrains' powerful IDEs, you can leverage their\n            extensive capabilities including best-in-class Web application development features (commercial IDEs only),\n            seamless <b>version control integration</b>, and first-class integrations with <b>task management</b> and\n            <b>bug tracking</b> systems.\n        </p>\n        <p>\n            Illuminated Cloud dramatically simplifies development and deployment of <b>Apex</b>, <b>Visualforce</b>,\n            <b>Lightning (Aura and LWC)</b>, and other Salesforce metadata types with modern IDE features such as:\n        </p>\n\n        <ul>\n            <li>Intelligent Code Completion and Time-Saving Live Templates</li>\n            <li>Extensive Source Code Navigation and Cross-Referencing</li>\n            <li>Refactoring</li>\n            <li>Code Inspections and Intentions</li>\n            <li>Intelligent Source Code Generation</li>\n            <li>Content Type-Aware Static Resource Management and Static Resource Bundles</li>\n            <li>Integrated API Documentation and ApexDoc Support</li>\n            <li>Configurable Source Code Formatters</li>\n            <li>Template-Based Source File Creation</li>\n            <li>Full Salesforce DX Support</li>\n            <li>Offline Apex Debugger</li>\n            <li>Integrated Apex Unit Test Execution and Code Coverage Analysis</li>\n            <li>Anonymous Apex/SOQL Query Execution and Apex Log Analyzer</li>\n            <li>Powerful Connection Management</li>\n            <li>Offline Symbol Table Generation</li>\n            <li>Flexible and Efficient Metadata Management</li>\n        </ul>\n\n        Note that Illuminated Cloud is a <a href=\"http://www.illuminatedcloud.com/purchase\">commercial offering</a> and\n        requires an active annual subscription-based license for continued access to its features.\n        ","tags":["Languages"],"vendor":"Rose Silver Software","version":"2.1.9.3","notes":"\n        <p><b>2.1.9.3</b></p>\n        <ul>\n            <li><b>Issue 1589</b> - Provided an automated workaround for the\n                <a href=\"https://github.com/msrivastav13/DX-Code-Companion/issues/15\">known issues</a> with deployment\n                of LWC component bundle files via the Tooling API. Tooling API-based LWC deployment is now enabled by\n                default. If an LWC bundle file is requested for deployment and any non-test JavaScript file in the\n                same bundle imports a custom SObject field or a field from the standard <code>User</code> object,\n                deployment is automatically routed to the Metadata API. Similarly, if Tooling API deployment of an\n                LWC bundle file fails specifically due to a <code>FIELD_INTEGRITY_EXCEPTION</code> with an error\n                message denoting a transitive compilation failure due to an unresolvable reference to a custom SObject\n                or <code>User</code> field, deployment of the entire bundle containing that file is automatically\n                retried using the Metadata API.\n                <p></p>\n                In my experience, this seems to provide superior deployment performance for individual LWC bundle files\n                most of the time. I've tested the deployment routing logic extensively and it seems to work very well,\n                but given that it uses a heuristic-based approach, it's possible that there may be variants that are\n                not currently covered. If that's the case, please let me know about these failures–in particular\n                the exact error code and message included in the Tooling API deployment failure response–and I'll\n                update the heuristic accordingly. If you do find this approach to be problematic while waiting for the\n                logic to be updated to cover additional scenarios–or if you're finding deployment performance to\n                be worse than before, perhaps because retries are often needed–you can disable Tooling API\n                deployment for LWC and the Metadata API will be used for all LWC deployments.\n            </li>\n            <li><b>Issue 1809</b> - PMD Apex is now integrated into IC2 as a real-time code inspection as opposed to\n                the bulk inspection integration that has been provided previously. The PMD distribution and ruleset\n                must still be downloaded and registered with IC2's <b>PMD Apex</b> inspection, but once registered,\n                IC2 engages PMD in-memory and reports issues in real-time just as with its own first-class code\n                inspections. Support is also provided for suppression of issues reported by PMD Apex via both\n                <code>@SuppressWarnings</code> annotation and <code>NOPMD</code> end-of-line comment. A\n                <a href=\"https://youtu.be/gjq64JPBYyQ\">demonstration video</a> has been published detailing this new\n                integration.\n            </li>\n            <li><b>Issue 1963</b> - It is no longer necessary to use namespace prefixes in the Anonymous Apex or SOQL\n                Query tool windows when working against a connection to an org with a namespace. Code completion and\n                reference resolution now work in those REPL-style editors exactly as they do in standard editors where\n                the code is inferred to be \"inside\" the namespace.\n            </li>\n            <li>Added a new template for SFDX project creation, <b>Illuminated Cloud</b>, that runs the Salesforce CLI\n                <code>force:project:create</code> command with the <code>standard</code> template, then removes all\n                template-generated files that are not relevant for IC2/JetBrains development. For those exclusively\n                using IC2 for Salesforce development, this is now the recommended SFDX project template.\n            </li>\n            <li>Made several changes in anticipation of the upcoming 2021.3 JetBrains IDE update to help ensure that\n                IC2 is compatible with that release immediately, at least based on the current EAP builds. As new\n                builds are released between now and 2021.3 GA, I will work to ensure continued compatibility.\n            </li>\n            <li>Other related fixes and improvements.</li>\n        </ul>\n        ","optionalDependencies":["com.intellij.modules.java","com.jetbrains.php","com.intellij.modules.python","com.intellij.modules.ruby","com.intellij.modules.webstorm","com.intellij.copyright","com.intellij.modules.coverage","com.intellij.css","JavaScript","org.jetbrains.plugins.textmate","org.jetbrains.idea.maven","JavaScriptDebugger"],"since":"203.7717","size":24261191}